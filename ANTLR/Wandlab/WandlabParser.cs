//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Wandlab.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class WandlabParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ARGUMENT=1, STRING=2, POINTER=3, NUMBER=4, COMMENT=5, ALPHA=6, BETA=7, 
		DELTA=8, ZETA=9, ETA=10, LAMBDA=11, MU=12, XI=13, OMICORN=14, PI=15, SIGMA=16, 
		OMEGA=17, GAMMA=18, TAU=19, PHI=20, CHI=21, DASH=22, SLASH=23, PIPE=24, 
		TICK=25, QUOTE=26, ARROW=27, LBRACKET=28, RBRACKET=29, WS=30;
	public const int
		RULE_program = 0, RULE_operation = 1, RULE_op = 2, RULE_function = 3, 
		RULE_subop = 4;
	public static readonly string[] ruleNames = {
		"program", "operation", "op", "function", "subop"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'Alpha'", "'Beta'", "'Delta'", "'Zeta'", 
		"'Eta'", "'Lambda'", "'Mu'", "'Xi'", "'Omicorn'", "'Pi'", "'Sigma'", "'Omega'", 
		"'Gamma'", "'Tau'", "'Phi'", "'Chi'", "'-'", "'/'", "'|'", "'^'", "'\"'", 
		"'->'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ARGUMENT", "STRING", "POINTER", "NUMBER", "COMMENT", "ALPHA", "BETA", 
		"DELTA", "ZETA", "ETA", "LAMBDA", "MU", "XI", "OMICORN", "PI", "SIGMA", 
		"OMEGA", "GAMMA", "TAU", "PHI", "CHI", "DASH", "SLASH", "PIPE", "TICK", 
		"QUOTE", "ARROW", "LBRACKET", "RBRACKET", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Wandlab.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static WandlabParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public WandlabParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public WandlabParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(WandlabParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DASH() { return GetTokens(WandlabParser.DASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH(int i) {
			return GetToken(WandlabParser.DASH, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWandlabListener typedListener = listener as IWandlabListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWandlabListener typedListener = listener as IWandlabListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWandlabVisitor<TResult> typedVisitor = visitor as IWandlabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			operation();
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DASH) {
				{
				{
				State = 11;
				Match(DASH);
				State = 12;
				operation();
				}
				}
				State = 17;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 18;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpContext op() {
			return GetRuleContext<OpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubopContext subop() {
			return GetRuleContext<SubopContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWandlabListener typedListener = listener as IWandlabListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWandlabListener typedListener = listener as IWandlabListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWandlabVisitor<TResult> typedVisitor = visitor as IWandlabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 2, RULE_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			op();
			State = 22;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TICK) {
				{
				State = 21;
				subop();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALPHA() { return GetToken(WandlabParser.ALPHA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETA() { return GetToken(WandlabParser.BETA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELTA() { return GetToken(WandlabParser.DELTA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIPE() { return GetTokens(WandlabParser.PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE(int i) {
			return GetToken(WandlabParser.PIPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARGUMENT() { return GetTokens(WandlabParser.ARGUMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGUMENT(int i) {
			return GetToken(WandlabParser.ARGUMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZETA() { return GetToken(WandlabParser.ZETA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ETA() { return GetToken(WandlabParser.ETA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(WandlabParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MU() { return GetToken(WandlabParser.MU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XI() { return GetToken(WandlabParser.XI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OMICORN() { return GetToken(WandlabParser.OMICORN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI() { return GetToken(WandlabParser.PI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGMA() { return GetToken(WandlabParser.SIGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OMEGA() { return GetToken(WandlabParser.OMEGA, 0); }
		public OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWandlabListener typedListener = listener as IWandlabListener;
			if (typedListener != null) typedListener.EnterOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWandlabListener typedListener = listener as IWandlabListener;
			if (typedListener != null) typedListener.ExitOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWandlabVisitor<TResult> typedVisitor = visitor as IWandlabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpContext op() {
		OpContext _localctx = new OpContext(Context, State);
		EnterRule(_localctx, 4, RULE_op);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALPHA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24;
				Match(ALPHA);
				}
				break;
			case BETA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 25;
				Match(BETA);
				}
				break;
			case DELTA:
				EnterOuterAlt(_localctx, 3);
				{
				State = 26;
				Match(DELTA);
				State = 27;
				Match(PIPE);
				State = 28;
				Match(ARGUMENT);
				}
				break;
			case ZETA:
				EnterOuterAlt(_localctx, 4);
				{
				State = 29;
				Match(ZETA);
				State = 30;
				Match(PIPE);
				State = 31;
				Match(ARGUMENT);
				State = 32;
				Match(PIPE);
				State = 33;
				Match(ARGUMENT);
				}
				break;
			case ETA:
				EnterOuterAlt(_localctx, 5);
				{
				State = 34;
				Match(ETA);
				State = 35;
				Match(PIPE);
				State = 36;
				Match(ARGUMENT);
				State = 37;
				Match(PIPE);
				State = 38;
				Match(ARGUMENT);
				}
				break;
			case LAMBDA:
				EnterOuterAlt(_localctx, 6);
				{
				State = 39;
				Match(LAMBDA);
				State = 40;
				function();
				}
				break;
			case MU:
				EnterOuterAlt(_localctx, 7);
				{
				State = 41;
				Match(MU);
				State = 42;
				Match(PIPE);
				State = 43;
				Match(ARGUMENT);
				State = 44;
				Match(PIPE);
				State = 45;
				Match(ARGUMENT);
				}
				break;
			case XI:
				EnterOuterAlt(_localctx, 8);
				{
				State = 46;
				Match(XI);
				State = 47;
				Match(PIPE);
				State = 48;
				Match(ARGUMENT);
				State = 49;
				Match(PIPE);
				State = 50;
				Match(ARGUMENT);
				}
				break;
			case OMICORN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 51;
				Match(OMICORN);
				State = 52;
				Match(PIPE);
				State = 53;
				Match(ARGUMENT);
				}
				break;
			case PI:
				EnterOuterAlt(_localctx, 10);
				{
				State = 54;
				Match(PI);
				State = 55;
				Match(PIPE);
				State = 56;
				Match(ARGUMENT);
				State = 57;
				Match(PIPE);
				State = 58;
				Match(ARGUMENT);
				}
				break;
			case SIGMA:
				EnterOuterAlt(_localctx, 11);
				{
				State = 59;
				Match(SIGMA);
				State = 60;
				function();
				}
				break;
			case OMEGA:
				EnterOuterAlt(_localctx, 12);
				{
				State = 61;
				Match(OMEGA);
				State = 62;
				Match(PIPE);
				State = 63;
				Match(ARGUMENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(WandlabParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(WandlabParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DASH() { return GetTokens(WandlabParser.DASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH(int i) {
			return GetToken(WandlabParser.DASH, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWandlabListener typedListener = listener as IWandlabListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWandlabListener typedListener = listener as IWandlabListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWandlabVisitor<TResult> typedVisitor = visitor as IWandlabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 6, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(LBRACKET);
			State = 67;
			operation();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DASH) {
				{
				{
				State = 68;
				Match(DASH);
				State = 69;
				operation();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 75;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TICK() { return GetToken(WandlabParser.TICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GAMMA() { return GetToken(WandlabParser.GAMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(WandlabParser.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGUMENT() { return GetToken(WandlabParser.ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAU() { return GetToken(WandlabParser.TAU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHI() { return GetToken(WandlabParser.PHI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHI() { return GetToken(WandlabParser.CHI, 0); }
		public SubopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWandlabListener typedListener = listener as IWandlabListener;
			if (typedListener != null) typedListener.EnterSubop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWandlabListener typedListener = listener as IWandlabListener;
			if (typedListener != null) typedListener.ExitSubop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWandlabVisitor<TResult> typedVisitor = visitor as IWandlabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubopContext subop() {
		SubopContext _localctx = new SubopContext(Context, State);
		EnterRule(_localctx, 8, RULE_subop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(TICK);
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GAMMA:
				{
				State = 78;
				Match(GAMMA);
				State = 79;
				Match(PIPE);
				State = 80;
				Match(ARGUMENT);
				}
				break;
			case TAU:
				{
				State = 81;
				Match(TAU);
				State = 82;
				Match(PIPE);
				State = 83;
				Match(ARGUMENT);
				}
				break;
			case PHI:
				{
				State = 84;
				Match(PHI);
				}
				break;
			case CHI:
				{
				State = 85;
				Match(CHI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ' ', '[', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x10', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x13', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x19', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x43', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'I', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', 'L', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'Y', '\n', '\x6', 
		'\x3', '\x6', '\x2', '\x2', '\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', 
		'\x2', '\x2', '\x66', '\x2', '\f', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x6', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x44', '\x3', '\x2', '\x2', '\x2', '\n', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x11', '\x5', '\x4', '\x3', '\x2', '\r', '\xE', '\a', 
		'\x18', '\x2', '\x2', '\xE', '\x10', '\x5', '\x4', '\x3', '\x2', '\xF', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x10', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x11', '\xF', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x14', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\a', '\x2', '\x2', 
		'\x3', '\x15', '\x3', '\x3', '\x2', '\x2', '\x2', '\x16', '\x18', '\x5', 
		'\x6', '\x4', '\x2', '\x17', '\x19', '\x5', '\n', '\x6', '\x2', '\x18', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x43', '\a', 
		'\b', '\x2', '\x2', '\x1B', '\x43', '\a', '\t', '\x2', '\x2', '\x1C', 
		'\x1D', '\a', '\n', '\x2', '\x2', '\x1D', '\x1E', '\a', '\x1A', '\x2', 
		'\x2', '\x1E', '\x43', '\a', '\x3', '\x2', '\x2', '\x1F', ' ', '\a', '\v', 
		'\x2', '\x2', ' ', '!', '\a', '\x1A', '\x2', '\x2', '!', '\"', '\a', '\x3', 
		'\x2', '\x2', '\"', '#', '\a', '\x1A', '\x2', '\x2', '#', '\x43', '\a', 
		'\x3', '\x2', '\x2', '$', '%', '\a', '\f', '\x2', '\x2', '%', '&', '\a', 
		'\x1A', '\x2', '\x2', '&', '\'', '\a', '\x3', '\x2', '\x2', '\'', '(', 
		'\a', '\x1A', '\x2', '\x2', '(', '\x43', '\a', '\x3', '\x2', '\x2', ')', 
		'*', '\a', '\r', '\x2', '\x2', '*', '\x43', '\x5', '\b', '\x5', '\x2', 
		'+', ',', '\a', '\xE', '\x2', '\x2', ',', '-', '\a', '\x1A', '\x2', '\x2', 
		'-', '.', '\a', '\x3', '\x2', '\x2', '.', '/', '\a', '\x1A', '\x2', '\x2', 
		'/', '\x43', '\a', '\x3', '\x2', '\x2', '\x30', '\x31', '\a', '\xF', '\x2', 
		'\x2', '\x31', '\x32', '\a', '\x1A', '\x2', '\x2', '\x32', '\x33', '\a', 
		'\x3', '\x2', '\x2', '\x33', '\x34', '\a', '\x1A', '\x2', '\x2', '\x34', 
		'\x43', '\a', '\x3', '\x2', '\x2', '\x35', '\x36', '\a', '\x10', '\x2', 
		'\x2', '\x36', '\x37', '\a', '\x1A', '\x2', '\x2', '\x37', '\x43', '\a', 
		'\x3', '\x2', '\x2', '\x38', '\x39', '\a', '\x11', '\x2', '\x2', '\x39', 
		':', '\a', '\x1A', '\x2', '\x2', ':', ';', '\a', '\x3', '\x2', '\x2', 
		';', '<', '\a', '\x1A', '\x2', '\x2', '<', '\x43', '\a', '\x3', '\x2', 
		'\x2', '=', '>', '\a', '\x12', '\x2', '\x2', '>', '\x43', '\x5', '\b', 
		'\x5', '\x2', '?', '@', '\a', '\x13', '\x2', '\x2', '@', '\x41', '\a', 
		'\x1A', '\x2', '\x2', '\x41', '\x43', '\a', '\x3', '\x2', '\x2', '\x42', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '$', '\x3', '\x2', '\x2', '\x2', '\x42', 
		')', '\x3', '\x2', '\x2', '\x2', '\x42', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x30', '\x3', '\x2', '\x2', '\x2', '\x42', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x38', '\x3', '\x2', '\x2', '\x2', '\x42', '=', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '?', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\x1E', '\x2', 
		'\x2', '\x45', 'J', '\x5', '\x4', '\x3', '\x2', '\x46', 'G', '\a', '\x18', 
		'\x2', '\x2', 'G', 'I', '\x5', '\x4', '\x3', '\x2', 'H', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'L', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', 
		'\x1F', '\x2', '\x2', 'N', '\t', '\x3', '\x2', '\x2', '\x2', 'O', 'X', 
		'\a', '\x1B', '\x2', '\x2', 'P', 'Q', '\a', '\x14', '\x2', '\x2', 'Q', 
		'R', '\a', '\x1A', '\x2', '\x2', 'R', 'Y', '\a', '\x3', '\x2', '\x2', 
		'S', 'T', '\a', '\x15', '\x2', '\x2', 'T', 'U', '\a', '\x1A', '\x2', '\x2', 
		'U', 'Y', '\a', '\x3', '\x2', '\x2', 'V', 'Y', '\a', '\x16', '\x2', '\x2', 
		'W', 'Y', '\a', '\x17', '\x2', '\x2', 'X', 'P', '\x3', '\x2', '\x2', '\x2', 
		'X', 'S', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 
		'X', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\a', '\x11', '\x18', '\x42', 'J', 'X',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
